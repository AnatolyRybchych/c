mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_ETHERNET, .ether.data = {0, 0, 0, 0, 0, 0} })
00:00:00:00:00:00
================================

mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_ETHERNET, .ether.data = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF} })
AA:BB:CC:DD:EE:FF
================================

mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_IPV4, .ipv4.data = {192, 168, 1, 1} })
192.168.1.1
================================

mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_IPV6, .ipv6.data = {0x20, 0x00} })
2000::
================================

mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_IPV6, .ipv6.data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16} })
102:304:506:708:90a:b0c:d0e:f10
================================

mc_address_write(mc_get_stdout(), &(MC_Address){ .type = MC_ADDRTYPE_IPV6, .ipv6.data = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, 192, 168, 1, 1} })
::ffff:192.168.1.1
================================

mc_address_parsec(&address, "192.168.1.1", &match)
mc_address_write(mc_get_stdout(), &address)
192.168.1.1
mc_fmt(mc_get_stdout(), "%.*s\n", match.end - match.beg, match.beg)
192.168.1.1
================================

mc_address_parsec(&address, "::ffff:192.168.1.1", &match)
mc_address_write(mc_get_stdout(), &address)
::ffff:192.168.1.1
mc_fmt(mc_get_stdout(), "%.*s\n", match.end - match.beg, match.beg)
::ffff:192.168.1.1
================================

mc_address_parsec(&address, "2000::fad1", &match)
mc_address_write(mc_get_stdout(), &address)
2000::fad1
mc_fmt(mc_get_stdout(), "%.*s\n", match.end - match.beg, match.beg)
2000::fad1
================================

mc_address_parsec(&address, "11:22:33:44:55:66", &match)
mc_address_write(mc_get_stdout(), &address)
11:22:33:44:55:66
mc_fmt(mc_get_stdout(), "%.*s\n", match.end - match.beg, match.beg)
11:22:33:44:55:66
================================

