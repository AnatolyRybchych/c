mc_task_new(sched, &root, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT", .iterations = 3 })
mc_task_new(sched, &subseq1, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 1", .iterations = 3 })
mc_task_new(sched, &subseq2, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 2", .iterations = 1 })
mc_task_new(sched, &subseq1_1, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 1 -> subsequent 1_1", .iterations = 3 })
mc_task_new(sched, &subseq1_2, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 1 -> subsequent 1_2", .iterations = 3 })
mc_task_new(sched, &subseq1_3, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 1 -> subsequent 1_3", .iterations = 3 })
mc_task_new(sched, &subseq2_1, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 2 -> subsequent 2_1", .iterations = 3 })
mc_task_new(sched, &subseq2_2, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 2 -> subsequent 2_2", .iterations = 3 })
mc_task_new(sched, &subseq2_3, do_some, sizeof(TaskData), &(TaskData){ .name = "ROOT -> subsequent 2 -> subsequent 2_3", .iterations = 3 })
mc_task_new(sched, &tail, do_some, sizeof(TaskData), &(TaskData){ .name = "LAST", .iterations = 3 })
================================


mc_task_run(root)
mc_task_unref(root)
================================

mc_task_run_after(subseq1, root, ((void *)0))
mc_task_unref(subseq1)
mc_task_run_after(subseq2, root, ((void *)0))
mc_task_unref(subseq2)
================================

mc_task_run_after(subseq1_1, subseq1, ((void *)0))
mc_task_unref(subseq1_1)
mc_task_run_after(subseq1_2, subseq1, ((void *)0))
mc_task_unref(subseq1_2)
mc_task_run_after(subseq1_3, subseq1, ((void *)0))
mc_task_unref(subseq1_3)
================================

mc_task_run_after(subseq2_1, subseq2, ((void *)0))
mc_task_unref(subseq2_1)
mc_task_run_after(subseq2_2, subseq2, ((void *)0))
mc_task_unref(subseq2_2)
mc_task_run_after(subseq2_3, subseq2, ((void *)0))
mc_task_unref(subseq2_3)
================================

mc_task_run_after(tail, subseq1_1, subseq1_2, subseq1_3, subseq2_1, subseq2_2, subseq2_3, ((void *)0))
mc_task_unref(tail)
================================

mc_sched_run(sched)
TASK ROOT; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 1; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 2 -> subsequent 2_1; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2 -> subsequent 2_2; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2 -> subsequent 2_3; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 2 -> subsequent 2_3; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2 -> subsequent 2_2; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2 -> subsequent 2_1; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 2 -> subsequent 2_1; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 2 -> subsequent 2_2; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 2 -> subsequent 2_3; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 1 -> subsequent 1_1; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_2; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_3; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_3; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_2; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_1; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK ROOT -> subsequent 1 -> subsequent 1_1; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 1 -> subsequent 1_2; iterations: 1, suspend: false
MC_TASK_DONE
TASK ROOT -> subsequent 1 -> subsequent 1_3; iterations: 1, suspend: false
MC_TASK_DONE
TASK LAST; iterations: 3, suspend: false
MC_TASK_CONTINUE
TASK LAST; iterations: 2, suspend: false
MC_TASK_CONTINUE
TASK LAST; iterations: 1, suspend: false
MC_TASK_DONE
